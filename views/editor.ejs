<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta http-equiv="Content-Security-Policy" content="default-src * 'unsafe-inline';style-src * 'unsafe-inline';script-src * 'unsafe-inline' 'unsafe-eval';img-src 'self' data: 'unsafe-inline';font-src * 'unsafe-inline' 'unsafe-eval' data:;connect-src 'self';frame-src 'self';media-src 'self';">
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, viewport-fit=cover" />

    <title>Infinity Label</title>

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
    <link rel="stylesheet" href="../plugins/fontawesome-free/css/all.min.css">
    <link rel="stylesheet" href="../plugins/toastr/toastr.min.css" />
    <link rel="stylesheet" href="../plugins/jsgrid/jsgrid.min.css" />
    <link rel="stylesheet" href="../plugins/jsgrid/jsgrid-theme.min.css" />
    <link rel="stylesheet" href="../adminlte/css/adminlte.min.css">
    <link rel="stylesheet" href="../fontaswome/css/all.min.css">
    <link rel="stylesheet" href="../plugins/select2/css/select2.min.css">
    <link rel="stylesheet" href="../plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css">
    <script src="../konva.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.0/xlsx.full.min.js"></script>

    <!-- <link rel="stylesheet" type="text/css" href="../bwipjs/lib/demo.css"> -->
    <!-- <script type="text/javascript" src="../bwipjs/dist/bwip-js.js"></script> -->
    <script type="text/javascript" src="../bwipjs/lib/symdesc.js"></script>
    <!-- <script type="text/javascript" src="../bwipjs/lib/canvas-toblob.js"></script> -->
    <!-- <script type="text/javascript" src="../bwipjs/lib/filesaver.js"></script> -->
    <!-- <script type="text/javascript" src="../bwipjs/lib/inconsolata.js"></script> -->
</head>

<body class="hold-transition sidebar-mini layout-navbar-fixed layout-fixed">
    <div class="wrapper">
        <nav class="main-header navbar navbar-expand navbar-white navbar-light">
            <!-- Left navbar links -->
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="javascript:void(0)" role="button" data-toggle="modal" data-target="#new-text" title="Add Text"><i class=" fa fa-font mr-1"></i> Add Label</a>
                </li>
                <!-- <li class="nav-item">
                    <a class="nav-link" href="javascript:void(0)" role="button" data-toggle="modal" data-target="#new-qr" title="Add QR"><i class="fa fa-qrcode mr-1"></i> Add QR</a>
                </li> -->
                <li class="nav-item">
                    <a class="nav-link" href="javascript:void(0)" role="button" data-toggle="modal" data-target="#new-barcode" title="Add Barcode"><i class="fa fa-barcode mr-1"></i> Add 2D Code</a>
                </li>
                <a class="nav-link" href="javascript:void(0)" role="button" id="btn-excel-load" title="Load Excel"><i class="fa fa-table mr-1"></i> Choose Excel</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="javascript:void(0)" role="button" id="btn-print" title="Print All"><i class="fa fa-print mr-1"></i> Print All</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="javascript:void(0)" role="button" id="btn-print-one" title="Print" style="display: none;"><i class="fa fa-print mr-1"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="javascript:void(0)" role="button" id="btn-data-prev" title="Previous Data" style="display: none;"><i class="fa fa-arrow-left mr-1"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="javascript:void(0)" role="button" id="btn-data-next" title="Next Data" style="display: none;"><i class="fa fa-arrow-right mr-1"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="javascript:void(0)" role="button" id="btn-delete-component" title="Delete component" style="display: none;"><i class="fa-solid fa-trash text-danger"></i></a>
                </li>
            </ul>

            <!-- Right navbar links -->
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" data-widget="fullscreen" href="#" role="button">
                        <i class="fas fa-expand-arrows-alt"></i>
                    </a>
                </li>
            </ul>
        </nav>

        <aside class="main-sidebar sidebar-dark-primary elevation-4">
            <a class="brand-link" href="/">
                <img src="../adminlte/img/logo.png" alt="Infinity Label" class="brand-image" style="opacity: .8">
                <span class="brand-text font-weight-light">Infinity Label</span>
            </a>

            <div class="sidebar">
                <nav class="mt-2">
                    <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false" id="component-list"></ul>
                </nav>
            </div>
        </aside>

        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper">
            <section class="content" id="content">
                <div id="canvas"></div>
            </section>
        </div>

        <!-- Control Sidebar (Don't Remove)-->
        <aside class="control-sidebar control-sidebar-dark"></aside>
    </div>

    <div class="modal fade" id="new-text" tabindex="-1" aria-labelledby="new-text" aria-hidden="true">
        <div class="modal-dialog" style="display: flex; align-items: center; justify-content: center; height: 100vh;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="mb-0">New Text</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 w-100">
                        <label for="component-name" class="form-label">Component Name</label>
                        <input class="form-control width-auto" id="component-name" autocomplete="off" type="text">
                    </div>
                    <div class="mb-3 w-100">
                        <label for="component-text" class="form-label">Display Value</label>
                        <input class="form-control width-auto" id="component-text" autocomplete="off" type="text">
                    </div>
                    <div class="mb-3 w-100">
                        <label for="component-attribute" class="form-label">Data Attribute</label>
                        <input class="form-control width-auto" id="component-attribute" autocomplete="off" type="text" disabled>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-danger" data-dismiss="modal">CLOSE</button>
                    <button type="button" class="btn btn-success" id="btn-add-text" data-dismiss="modal" disabled>ADD</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="new-qr" tabindex="-1" aria-labelledby="new-qr" aria-hidden="true">
        <div class="modal-dialog" style="display: flex; align-items: center; justify-content: center; height: 100vh;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="mb-0">New QR</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 w-100">
                        <label for="qr-component-name" class="form-label">Component Name</label>
                        <input class="form-control width-auto" id="qr-component-name" autocomplete="off" type="text">
                    </div>
                    <div class="mb-3 w-100">
                        <label for="qr-component-text" class="form-label">Display Value</label>
                        <input class="form-control width-auto" id="qr-component-text" autocomplete="off" type="text">
                    </div>
                    <div class="mb-3 w-100">
                        <label for="qr-component-attribute" class="form-label">Data Attribute</label>
                        <input class="form-control width-auto" id="qr-component-attribute" autocomplete="off" type="text" disabled>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-danger" data-dismiss="modal">CLOSE</button>
                    <button type="button" class="btn btn-success" id="btn-add-qr" data-dismiss="modal" disabled>ADD</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="new-barcode" aria-labelledby="new-barcode" aria-hidden="true">
        <div class="modal-dialog" style="display: flex; align-items: center; justify-content: center; height: 100vh;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="mb-0">New 2D Code</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 w-100">
                        <label for="barcode-component-name" class="form-label">Component Name</label>
                        <input class="form-control width-auto" id="barcode-component-name" autocomplete="off" type="text">
                    </div>
                    <div class="form-group mb-3 w-100">
                        <label>Barcode Type</label>
                        <select type="text" class="form-control" id="symbol" style="width: 100%"></select>
                    </div>
                    <div class="mb-3 w-100">
                        <label for="symtext" class="form-label">Display Value</label>
                        <input class="form-control width-auto" id="symtext" spellcheck="false" autocomplete="off" type="text">
                    </div>
                    <div class="mb-3 w-100">
                        <label for="symaltx" class="form-label">Display Value Caption</label>
                        <input class="form-control width-auto" id="symaltx" spellcheck="false" autocomplete="off" type="text">
                    </div>
                    <div class="mb-3 w-100">
                        <label for="symopts" class="form-label">Option</label>
                        <input class="form-control width-auto" id="symopts" spellcheck="false" autocomplete="off" type="text" disabled>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-danger" data-dismiss="modal">CLOSE</button>
                    <button type="button" class="btn btn-success" id="btn-add-barcode" data-dismiss="modal" disabled>ADD</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade bd-example-modal-xl" tabindex="-1" role="dialog" aria-labelledby="modal-data-viewer" aria-hidden="true" id="modal-data-viewer">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="card m-0 p-0 no-shadow">
                    <div class="card-header">
                        <strong>Data Loaded</strong>
                    </div>
                    <div class="card-body p-0">
                        <div id="data-viewer"></div>
                    </div>
                    <div class="card-footer">
                        <a class="btn btn-primary btn-block" id="btn-print-all">Print All</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="../plugins/jquery/jquery.min.js"></script>
    <script src="../plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="../plugins/toastr/toastr.min.js"></script>
    <script src="../plugins/jsgrid/jsgrid.min.js"></script>
    <script src="../adminlte/js/adminlte.min.js"></script>
    <script src="../plugins/select2/js/select2.full.min.js"></script>

    <script>
        // HTML Decoder
        function htmlDecode(input) {
            const doc = new DOMParser().parseFromString(input, "text/html");
            return doc.documentElement.textContent;
        }

        // Set up the select list of barcode types
        $(document).find('#symbol').html('');

        var opts = [];
        for (var id in symdesc) {
            opts.push(symdesc[id]);
        }

        opts.sort(function (a, b) {
            return a.desc < b.desc ? -1 : 1
        });

        for (var i = 0, l = opts.length; i < l; i++) {
            $(document).find('#symbol').append(`<option value="` + opts[i].sym + `">` + opts[i].desc + `</option>`);
        }

        $(document).on('change', '#symbol', function () {
            var desc = symdesc[$(this).val()];
            if (desc) {
                $(document).find('#symtext').val('');
                $(document).find('#symopts').val(desc.opts);
            } else {
                $(document).find('#symtext').val('');
                $(document).find('#symopts').val('');
            }
            $(document).find('#symaltx').val('');
        });

        /**
         * Enable Select2
         */
        $('#symbol').select2({
            theme: 'bootstrap4'
        });

        // Layout configuration from file read expressjs
        var objects = null;
        var design_string = "<%= design %>";

        var decodedDesign = htmlDecode(design_string);
        var design = JSON.parse(decodedDesign.slice(1, -1));
        var width = Number(design[0].file.width);
        var height = Number(design[0].file.height);

        var width_section = $(document).find('#content').width() - 10;

        let stage = new Konva.Stage({
            container: 'canvas',
            width: width_section,
            height: window.innerHeight - 100,
        });

        let layer = new Konva.Layer();

        stage.add(layer);

        let centerX = stage.width() / 2;
        let centerY = stage.height() / 2;

        if (width && height) {
            var Label = new Konva.Rect({
                x: centerX - (parseFloat(width) * 3.7795275591),
                y: centerY - (parseFloat(height) * 3.7795275591),
                width: parseFloat(width) * 3.7795275591, //konversi mm ke px
                height: parseFloat(height) * 3.7795275591,
                fill: 'white',
                stroke: 'lightgray',
                strokeWidth: 1,
                name: 'base_layout'
            });

            layer.add(Label);

            layer.draw();
        }

        /**
         * Mouse Handler
         */

        layer.on('mouseover', function (evt) {
            document.body.style.cursor = 'pointer';
        });

        layer.on('mouseout', function (evt) {
            document.body.style.cursor = 'default';
        });

        /**
         * Transformer & Attach Shape
         */

        var transformer = new Konva.Transformer();

        var selectedShape = null;
        layer.on('click tap', function (evt) {
            transformer.destroy();

            transformer = new Konva.Transformer();

            // transformer.detach();

            if (evt.target.attrs.name !== "base_layout") {
                selectedShape = evt.target;
                layer.add(transformer);
                transformer.attachTo(evt.target).rotateEnabled(false);
                // $('#btn-delete-component').removeClass('disabled');
                $('#btn-delete-component').show();
            } else {
                selectedShape = null;
                // $('#btn-delete-component').addClass('disabled');
                $('#btn-delete-component').hide();
            }
        });

        /**
         * Load Component
         */

        if (design[0].label.length != 0) {
            for (var i = 0; i < design[0].label.length; i++) {
                $(document).find('#component-list').append(`<li class="nav-item">
                                                                <a href="javascript:void(0)" class="nav-link">
                                                                    <i class="nav-icon fa fa-circle"></i>
                                                                    <p>`+ design[0].label[i].name + `</p>
                                                                </a>
                                                            </li>`);

                if (design[0].label[i].type === "text") {
                    var text = new Konva.Text({
                        x: design[0].label[i].x,
                        y: design[0].label[i].y,
                        text: design[0].label[i].text,
                        fontSize: design[0].label[i].fontSize,
                        draggable: true,
                        name: design[0].label[i].name,
                        type: "text"
                    });

                    layer.add(text);

                    text.on('dragmove', function () {
                        var containerPosition = this.getAbsolutePosition();
                        var stageBox = stage.container().getBoundingClientRect();

                        var areaPosition = {
                            x: containerPosition.x,
                            y: containerPosition.y,
                        };

                        for (let i = 0; i < design[0].label.length; i++) {
                            if (design[0].label[i].name === this.attrs.name) {
                                design[0].label[i].x = areaPosition.x;
                                design[0].label[i].y = areaPosition.y;
                                break; // Stop once the label is found and updated
                            }
                        }

                        var data = JSON.stringify(design);

                        var settings = {
                            "url": "http://localhost:3000/design_update",
                            "method": "POST",
                            "timeout": 0,
                            "headers": {
                                "Content-Type": "text/plain"
                            },
                            "data": data,
                        };

                        $.ajax(settings).done(function (response) {
                            // console.log(response);
                        });
                    });

                    text.on('dragend', function () {
                        var data = JSON.stringify(design);

                        var settings = {
                            "url": "http://localhost:3000/design_update",
                            "method": "POST",
                            "timeout": 0,
                            "headers": {
                                "Content-Type": "text/plain"
                            },
                            "data": data
                        };

                        $.ajax(settings).done(function (response) {
                            // console.log(response);
                        });
                    });

                    text.on('transform', function () {
                        var containerPosition = this.getAbsolutePosition();
                        var stageBox = stage.container().getBoundingClientRect();

                        var areaPosition = {
                            x: containerPosition.x,
                            y: containerPosition.y,
                        };

                        var scaleX = this.scaleX();
                        var scaleY = this.scaleY();
                        var originalFontSize = this.fontSize();
                        var scaledFontSize = originalFontSize * Math.max(scaleX, scaleY);

                        for (let i = 0; i < design[0].label.length; i++) {
                            if (design[0].label[i].name === this.attrs.name) {
                                design[0].label[i].fontSize = scaledFontSize;
                                break; // Stop once the label is found and updated
                            }
                        }

                        var data = JSON.stringify(design);

                        var settings = {
                            "url": "http://localhost:3000/design_update",
                            "method": "POST",
                            "timeout": 0,
                            "headers": {
                                "Content-Type": "text/plain"
                            },
                            "data": data,
                        };

                        $.ajax(settings).done(function (response) {
                            // console.log(response);
                        });
                    });
                }

                if (design[0].label[i].type === "qr") {
                    var x = design[0].label[i].x;
                    var y = design[0].label[i].y;
                    var height = Number(design[0].label[i].height);
                    var width = Number(design[0].label[i].width);
                    var name = design[0].label[i].name;

                    var imageObj = new Image();
                    imageObj.src = design[0].label[i].text;

                    var qr = new Konva.Image({
                        x: x,
                        y: y,
                        image: imageObj,
                        width: width,
                        height: height,
                        draggable: true,
                        name: name,
                        type: "qr"
                    });

                    layer.add(qr);

                    qr.on('dragmove', function () {
                        var containerPosition = this.getAbsolutePosition();
                        var stageBox = stage.container().getBoundingClientRect();

                        var areaPosition = {
                            x: containerPosition.x,
                            y: containerPosition.y,
                        };

                        for (let i = 0; i < design[0].label.length; i++) {
                            if (design[0].label[i].name === this.attrs.name) {
                                design[0].label[i].x = areaPosition.x;
                                design[0].label[i].y = areaPosition.y;
                                break; // Stop once the label is found and updated
                            }
                        }

                        var data = JSON.stringify(design);

                        var settings = {
                            "url": "http://localhost:3000/design_update",
                            "method": "POST",
                            "timeout": 0,
                            "headers": {
                                "Content-Type": "text/plain"
                            },
                            "data": data,
                        };

                        $.ajax(settings).done(function (response) {
                            // console.log(response);
                        });
                    });

                    qr.on('dragend', function () {
                        var data = JSON.stringify(design);

                        var settings = {
                            "url": "http://localhost:3000/design_update",
                            "method": "POST",
                            "timeout": 0,
                            "headers": {
                                "Content-Type": "text/plain"
                            },
                            "data": data
                        };

                        $.ajax(settings).done(function (response) {
                            // console.log(response);
                        });
                    });

                    qr.on('transform', function () {
                        var containerPosition = this.getAbsolutePosition();
                        var stageBox = stage.container().getBoundingClientRect();

                        var areaPosition = {
                            x: containerPosition.x,
                            y: containerPosition.y,
                        };

                        var width_new = this.width() * (this.scaleX());
                        var height_new = this.height() * (this.scaleY());

                        for (let i = 0; i < design[0].label.length; i++) {
                            if (design[0].label[i].name === this.attrs.name) {
                                design[0].label[i].width = width_new.toFixed(0);
                                design[0].label[i].height = height_new.toFixed(0);
                                break; // Stop once the label is found and updated
                            }
                        }

                        var data = JSON.stringify(design);

                        var settings = {
                            "url": "http://localhost:3000/design_update",
                            "method": "POST",
                            "timeout": 0,
                            "headers": {
                                "Content-Type": "text/plain"
                            },
                            "data": data,
                        };

                        $.ajax(settings).done(function (response) {
                            // console.log(response);
                        });
                    });
                }

                if (design[0].label[i].type === "barcode") {
                    var x = design[0].label[i].x;
                    var y = design[0].label[i].y;
                    var height = Number(design[0].label[i].height);
                    var width = Number(design[0].label[i].width);
                    var name = design[0].label[i].name;

                    var codeImg = new Image();
                    codeImg.src = design[0].label[i].text;

                    var barcode = new Konva.Image({
                        x: x,
                        y: y,
                        image: codeImg,
                        width: width,
                        height: height,
                        draggable: true,
                        name: name,
                        type: "barcode"
                    });

                    layer.add(barcode);

                    barcode.on('dragmove', function () {
                        var containerPosition = this.getAbsolutePosition();
                        var stageBox = stage.container().getBoundingClientRect();

                        var areaPosition = {
                            x: containerPosition.x,
                            y: containerPosition.y,
                        };

                        for (let i = 0; i < design[0].label.length; i++) {
                            if (design[0].label[i].name === this.attrs.name) {
                                design[0].label[i].x = areaPosition.x;
                                design[0].label[i].y = areaPosition.y;
                                break; // Stop once the label is found and updated
                            }
                        }

                        var data = JSON.stringify(design);

                        var settings = {
                            "url": "http://localhost:3000/design_update",
                            "method": "POST",
                            "timeout": 0,
                            "headers": {
                                "Content-Type": "text/plain"
                            },
                            "data": data,
                        };

                        $.ajax(settings).done(function (response) {
                            // console.log(response);
                        });
                    });

                    barcode.on('dragend', function () {
                        var data = JSON.stringify(design);

                        var settings = {
                            "url": "http://localhost:3000/design_update",
                            "method": "POST",
                            "timeout": 0,
                            "headers": {
                                "Content-Type": "text/plain"
                            },
                            "data": data
                        };

                        $.ajax(settings).done(function (response) {
                            // console.log(response);
                        });
                    });

                    barcode.on('transform', function () {
                        var containerPosition = this.getAbsolutePosition();
                        var stageBox = stage.container().getBoundingClientRect();

                        var areaPosition = {
                            x: containerPosition.x,
                            y: containerPosition.y,
                        };

                        var width_new = this.width() * (this.scaleX());
                        var height_new = this.height() * (this.scaleY());

                        for (let i = 0; i < design[0].label.length; i++) {
                            if (design[0].label[i].name === this.attrs.name) {
                                design[0].label[i].width = width_new.toFixed(0);
                                design[0].label[i].height = height_new.toFixed(0);
                                break; // Stop once the label is found and updated
                            }
                        }

                        var data = JSON.stringify(design);

                        var settings = {
                            "url": "http://localhost:3000/design_update",
                            "method": "POST",
                            "timeout": 0,
                            "headers": {
                                "Content-Type": "text/plain"
                            },
                            "data": data,
                        };

                        $.ajax(settings).done(function (response) {
                            // console.log(response);
                        });
                    });
                }
            }

            layer.draw();
        }

        /**
         * Add Text
         */

        var component_name = "";
        var component_text = "";
        var component_attribute = "";

        $(document).on('keyup', '#component-name', function () {
            component_name = $(this).val();
            component_name = component_name.toLowerCase();
            component_name = component_name.replace(/ /g, '_');
            component_attribute = component_name.replace(/ /g, '_');

            $(this).val(component_name);
            $(document).find('#component-attribute').val(component_attribute);

            component_text = $(document).find('#component-text').val();
            component_attribute = $(document).find('#component-attribute').val();

            if (component_name === "" || component_name === " " ||
                component_text === "" || component_text === " " ||
                component_attribute === "" || component_attribute === "") {
                $(document).find('#btn-add-text').attr('disabled', 'disabled');
            } else {
                $(document).find('#btn-add-text').removeAttr('disabled');
            }
        });

        $(document).on('keyup', '#component-text', function () {
            component_text = $(this).val();

            component_name = $(document).find('#component-name').val();
            component_attribute = $(document).find('#component-attribute').val();

            if (component_name === "" || component_name === " " ||
                component_text === "" || component_text === " " ||
                component_attribute === "" || component_attribute === "") {
                $(document).find('#btn-add-text').attr('disabled', 'disabled');
            } else {
                $(document).find('#btn-add-text').removeAttr('disabled');
            }
        });

        $(document).on('click', '#btn-add-text', function () {
            component_text = $(document).find('#component-text').val();
            component_attribute = $(document).find('#component-attribute').val();

            var component = {
                "name": component_name,
                "text": component_text,
                "attribute": component_attribute,
                "type": "text",
                "fontSize": 20,
                "x": centerX,
                "y": centerY
            }

            design[0].label.push(component);

            var data = JSON.stringify(design);

            var settings = {
                "url": "http://localhost:3000/design_update",
                "method": "POST",
                "timeout": 0,
                "headers": {
                    "Content-Type": "text/plain"
                },
                "data": data,
            };

            $.ajax(settings).done(function (response) {
                window.location.reload();
            });

            var text = new Konva.Text({
                x: centerX,
                y: centerY,
                text: component_text,
                fontSize: 20,
                draggable: true,
                name: component_name
            });

            layer.add(text);
            layer.draw();
        });

        /**
         * Add QR
         */

        var qr_component_name = "";
        var qr_component_text = "";
        var qr_component_attribute = "";

        $(document).on('keyup', '#qr-component-name', function () {
            qr_component_name = $(this).val();
            qr_component_name = qr_component_name.toLowerCase();
            qr_component_name = qr_component_name.replace(/ /g, '_');
            qr_component_attribute = qr_component_name.replace(/ /g, '_');

            $(this).val(qr_component_name);
            $(document).find('#qr-component-attribute').val(qr_component_attribute);

            qr_component_text = $(document).find('#qr-component-text').val();
            qr_component_attribute = $(document).find('#qr-component-attribute').val();

            if (qr_component_name === "" || qr_component_name === " " ||
                qr_component_text === "" || qr_component_text === " " ||
                qr_component_attribute === "" || qr_component_attribute === "") {
                $(document).find('#btn-add-qr').attr('disabled', 'disabled');
            } else {
                $(document).find('#btn-add-qr').removeAttr('disabled');
            }
        });

        $(document).on('keyup', '#qr-component-text', function () {
            qr_component_text = $(this).val();

            qr_component_name = $(document).find('#qr-component-name').val();
            qr_component_attribute = $(document).find('#qr-component-attribute').val();

            if (qr_component_name === "" || qr_component_name === " " ||
                qr_component_text === "" || qr_component_text === " " ||
                qr_component_attribute === "" || qr_component_attribute === "") {
                $(document).find('#btn-add-qr').attr('disabled', 'disabled');
            } else {
                $(document).find('#btn-add-qr').removeAttr('disabled');
            }
        });

        $(document).on('click', '#btn-add-qr', function () {
            qr_component_text = $(document).find('#qr-component-text').val();
            qr_component_attribute = $(document).find('#qr-component-attribute').val();

            var component = {
                "name": qr_component_name,
                "text": qr_component_text,
                "attribute": qr_component_attribute,
                "type": "qr",
                "x": centerX,
                "y": centerY,
                "width": 100,
                "height": 100
            }

            var data = JSON.stringify(component);

            var settings = {
                "url": "http://localhost:3000/qrgen",
                "method": "POST",
                "timeout": 0,
                "headers": {
                    "Content-Type": "text/plain"
                },
                "data": data,
            };

            $.ajax(settings).done(function (response) {
                var component_insert = {
                    "name": qr_component_name,
                    "text": response,
                    "attribute": qr_component_attribute,
                    "type": "qr",
                    "x": centerX,
                    "y": centerY,
                    "width": 100,
                    "height": 100
                }

                design[0].label.push(component_insert);

                var data = JSON.stringify(design);

                var settings = {
                    "url": "http://localhost:3000/design_update",
                    "method": "POST",
                    "timeout": 0,
                    "headers": {
                        "Content-Type": "text/plain"
                    },
                    "data": data,
                };

                $.ajax(settings).done(function (response) {
                    window.location.reload();
                });

                var imageObj = new Image();
                imageObj.onload = function () {
                    var qr = new Konva.Image({
                        x: centerX,
                        y: centerY,
                        image: imageObj,
                        width: 100,
                        height: 100,
                    });

                    layer.add(qr);
                };
                imageObj.src = response;
            });
        });

        /**
         * Excel Reader 
         */

        var label_merge = [];
        var excel_data = null;

        function updateTemplateWithInput(inputData, template) {
            // Create a new object based on the template to avoid mutating the original template
            let updatedTemplate = { ...template };

            // Check if the attribute in the template exists in the input data
            if (inputData.hasOwnProperty(updatedTemplate.attribute)) {
                // Update the text field in the template with the value from the input data
                updatedTemplate.text = inputData[updatedTemplate.attribute];
            }

            return updatedTemplate;
        }

        $(document).on('click', '#btn-excel-load', function () {
            const excelFile = document.createElement('input');
            excelFile.type = 'file';
            excelFile.accept = '.xlsx';
            excelFile.style.display = 'none';

            excelFile.click();

            excelFile.addEventListener('change', function (event) {
                label_merge = [];

                const file = event.target.files[0];

                const reader = new FileReader();

                reader.onload = function (e) {
                    const arrayBuffer = e.target.result;

                    // Read Excel
                    const workbook = XLSX.read(arrayBuffer, { type: 'array' });

                    // First worksheet
                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];

                    // Sheet to JSON
                    const data = XLSX.utils.sheet_to_json(worksheet);
                    excel_data = XLSX.utils.sheet_to_json(worksheet);

                    // Merge data to label component
                    for (var i = 0; i < data.length; i++) {
                        var label_merge_prep = [];
                        for (var j = 0; j < design[0].label.length; j++) {
                            const updatedTemplate = updateTemplateWithInput(data[i], design[0].label[j]);
                            label_merge_prep.push(updatedTemplate);
                        }
                        label_merge.push(label_merge_prep);
                    }

                    // Get QR Code
                    for (var k = 0; k < label_merge.length; k++) {
                        for (var l = 0; l < label_merge[k].length; l++) {
                            if (label_merge[k][l].type === "qr") {
                                var iter_k = k;
                                var before_generate = label_merge[k][l];
                                var to_generate = JSON.stringify(label_merge[k][l]);

                                var settings = {
                                    "url": "http://localhost:3000/qrgen",
                                    "method": "POST",
                                    "timeout": 0,
                                    "headers": {
                                        "Content-Type": "text/plain"
                                    },
                                    "data": to_generate,
                                    "async": false
                                };

                                var qr = "";
                                $.ajax(settings).done(function (response) {
                                    qr = response;
                                });

                                label_merge[k][l].text = qr;
                            }

                            if (label_merge[k][l].type === "barcode") {
                                var iter_k = k;
                                var before_generate = label_merge[k][l];
                                var to_generate = JSON.stringify(label_merge[k][l]);

                                var settings = {
                                    "url": "http://localhost:3000/barcode",
                                    "method": "POST",
                                    "timeout": 0,
                                    "headers": {
                                        "Content-Type": "text/plain"
                                    },
                                    "data": to_generate,
                                    "async": false
                                };

                                var barcode = "";
                                $.ajax(settings).done(function (response) {
                                    barcode = response;
                                });

                                label_merge[k][l].text = 'data:image/png;base64,' + barcode;
                            }
                        }
                    }
                }

                reader.onloadend = function (e) {
                    toastr.success('Data Loaded!');

                    if (design[0].label.length != 0) {
                        var data_column_name = [];

                        for (var i = 0; i < design[0].label.length; i++) {
                            data_column_name.push(
                                {
                                    name: design[0].label[i].name,
                                    type: "text",
                                    title: design[0].label[i].name
                                }
                            );
                        }
                    }

                    $("#data-viewer").jsGrid({
                        width: "100%",

                        sorting: true,
                        paging: true,
                        pageSize: 10,

                        data: excel_data,

                        fields: data_column_name
                    });

                    $(document).find('#modal-data-viewer').modal('show');
                }

                reader.readAsArrayBuffer(file);
            });
        });

        $(document).on('click', '#btn-print', function () {
            if (label_merge.length === 0) {
                toastr.error('Choose Excel File!');
            } else {
                $(document).find('#modal-data-viewer').modal('show');
            }
        });

        function data_to_design(i) {
            layer.clear();

            var design = JSON.parse(decodedDesign.slice(1, -1));
            var width = Number(design[0].file.width);
            var height = Number(design[0].file.height);

            let centerX = stage.width() / 2;
            let centerY = stage.height() / 2;

            var Label = new Konva.Rect({
                x: centerX - (parseFloat(width) * 3.7795275591),
                y: centerY - (parseFloat(height) * 3.7795275591),
                width: parseFloat(width) * 3.7795275591, //konversi mm ke px
                height: parseFloat(height) * 3.7795275591,
                fill: 'white',
                stroke: 'lightgray',
                strokeWidth: 1,
                name: 'base_layout'
            });

            layer.add(Label);

            layer.draw();

            for (var j = 0; j < label_merge[i].length; j++) {
                if (label_merge[i][j].type === "text") {
                    var text = new Konva.Text({
                        x: label_merge[i][j].x,
                        y: label_merge[i][j].y,
                        text: label_merge[i][j].text,
                        fontSize: label_merge[i][j].fontSize,
                        draggable: false,
                        name: label_merge[i][j].name,
                        type: "text"
                    });

                    layer.add(text);
                }

                if (label_merge[i][j].type === "qr") {
                    var x = label_merge[i][j].x;
                    var y = label_merge[i][j].y;
                    var height = Number(label_merge[i][j].height);
                    var width = Number(label_merge[i][j].width);
                    var name = label_merge[i][j].name;

                    var imageObj = new Image();
                    imageObj.src = label_merge[i][j].text;

                    var qr = new Konva.Image({
                        x: x,
                        y: y,
                        image: imageObj,
                        width: width,
                        height: height,
                        draggable: true,
                        name: name,
                        type: "qr"
                    });

                    layer.add(qr);
                }

                if (label_merge[i][j].type === "barcode") {
                    var x = label_merge[i][j].x;
                    var y = label_merge[i][j].y;
                    var height = Number(label_merge[i][j].height);
                    var width = Number(label_merge[i][j].width);
                    var name = label_merge[i][j].name;

                    var imageObj = new Image();
                    imageObj.src = label_merge[i][j].text;

                    var qr = new Konva.Image({
                        x: x,
                        y: y,
                        image: imageObj,
                        width: width,
                        height: height,
                        draggable: true,
                        name: name,
                        type: "barcode"
                    });

                    layer.add(qr);
                }
            }

            setTimeout(function () {
                let dataURL = layer.toDataURL({
                    x: centerX - (parseFloat(width) * 3.7795275591),
                    y: centerY - (parseFloat(height) * 3.7795275591),
                    width: parseFloat(width) * 3.7795275591,
                    height: parseFloat(height) * 3.7795275591
                });

                var settings = {
                    "url": "http://localhost:3000/savepnglabel/" + i,
                    "method": "POST",
                    "timeout": 0,
                    "headers": {
                        "Content-Type": "text/plain"
                    },
                    "data": dataURL
                };

                $.ajax(settings).done(function (response) {
                    i = i + 1;
                    if (i < label_merge.length - 1) {
                        data_to_design(i);
                    }
                });
            }, 1000);
        }

        $(document).on('click', '#btn-print-all', function () {
            $(document).find('#modal-data-viewer').modal('hide');

            setTimeout(function () {
                if (label_merge.length === 0) {
                    toastr.error('Choose Excel File!');
                } else {
                    var i = 0;

                    data_to_design(i);
                }
            }, 3000);
        });

        /**
         * Remove Component (Bug Input Can't Type After Remove)
         */

        $(document).on('click', '#btn-delete-component', function (event) {
            event.preventDefault();

            var componentName = selectedShape.name();
            var deleteConfirmed = confirm('Remove this component "' + componentName + '" ?');
            var fileName = design[0].file.name;

            if (deleteConfirmed) {
                var shape = stage.findOne('.' + componentName);
                if (shape) {
                    if (design && design.length > 0) {
                        for (var i = 0; i < design[0].label.length; i++) {
                            if (design[0].label[i].name === componentName) {
                                design[0].label.splice(i, 1);
                                toastr.error(componentName + ' Removed!');
                                break;
                            }
                        }
                    }

                    // Component detach
                    selectedShape = null;
                    shape.destroy();
                    transformer.detach();

                    layer.draw();

                    var data = JSON.stringify(design);

                    var settings = {
                        "url": "http://localhost:3000/design_update",
                        "method": "POST",
                        "timeout": 0,
                        "headers": {
                            "Content-Type": "text/plain"
                        },
                        "data": data,
                    };

                    $(document).find('#component-list').html('');

                    $.ajax(settings).done(function (response) {
                        $('#btn-delete-component').hide();

                        for (var i = 0; i < design[0].label.length; i++) {
                            $(document).find('#component-list').append(`<li class="nav-item">
                                                                <a href="javascript:void(0)" class="nav-link">
                                                                    <i class="nav-icon fa fa-circle"></i>
                                                                    <p>`+ design[0].label[i].name + `</p>
                                                                </a>
                                                            </li>`);
                        }
                    });
                }
            }
        });

        /**
         * Add Barcode
         */

        var barcode_component_name = "";
        var barcode_component_text = "";
        var barcode_component_attribute = "";

        var barcode_component_symbol = "";
        var barcode_component_symtext = "";
        var barcode_component_symaltx = "";
        var barcode_component_symopts = "";

        $(document).on('keyup', '#barcode-component-name', function () {
            barcode_component_name = $(this).val();
            barcode_component_name = barcode_component_name.toLowerCase();
            barcode_component_name = barcode_component_name.replace(/ /g, '_');
            barcode_component_attribute = barcode_component_name.replace(/ /g, '_');

            $(this).val(barcode_component_name);

            if (barcode_component_name === "" || barcode_component_name === " "
                // ||barcode_component_text === "" || barcode_component_text === " " ||
                // barcode_component_attribute === "" || barcode_component_attribute === ""
            ) {
                $(document).find('#btn-add-barcode').attr('disabled', 'disabled');
            } else {
                $(document).find('#btn-add-barcode').removeAttr('disabled');
            }
        });

        $(document).on('click', '#btn-add-barcode', function () {
            barcode_component_symbol = symdesc[document.getElementById('symbol').value];
            barcode_component_symtext = $(document).find('#symtext').val();
            barcode_component_symaltx = $(document).find('#symaltx').val();

            var component = {
                "name": barcode_component_name,
                "text": barcode_component_symtext,
                "attribute": barcode_component_attribute,
                "type": "barcode",
                "type_code": barcode_component_symbol.sym,
                "x": centerX,
                "y": centerY,
                "width": 100,
                "height": 100
            }

            var data = JSON.stringify(component);

            var settings = {
                "url": "http://localhost:3000/barcode",
                "method": "POST",
                "timeout": 0,
                "headers": {
                    "Content-Type": "text/plain"
                },
                "data": data,
            };

            $.ajax(settings).done(function (response) {
                var barcode_text = response;

                var component_insert = {
                    "name": barcode_component_name,
                    "text": 'data:image/png;base64,' + barcode_text,
                    "attribute": barcode_component_attribute,
                    "type": "barcode",
                    "type_code": barcode_component_symbol.sym,
                    "x": centerX,
                    "y": centerY,
                    "width": 100,
                    "height": 100
                }
                design[0].label.push(component_insert);

                var data = JSON.stringify(design);

                var settings = {
                    "url": "http://localhost:3000/design_update",
                    "method": "POST",
                    "timeout": 0,
                    "headers": {
                        "Content-Type": "text/plain"
                    },
                    "data": data,
                };

                $.ajax(settings).done(function (response) {
                    window.location.reload();
                });
            });
        });
    </script>
</body>

</html>